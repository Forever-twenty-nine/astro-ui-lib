---
import Typography from "../../ui/Typography.astro";
import Container from "../../elements/Container.astro";
import Section from "../../elements/Section.astro";
import Button from "../../ui/Button.astro";
import { Image as AstroImage } from "astro:assets";
import type { HeroProps } from "../../../types/sections/HeroProps";
import type { AnimationLevel } from "../../../types/Shared";
import fallbackHero2 from "../../../assets/hero/600x400.webp";

const {
  sectionId,
  sectionClass = "",
  containerId,
  containerClass = "",
  title = "Hero2: layout centrado",
  titleClass = "",
  description = "Este componente incluye una imagen centrada arriba, seguida de un título, una descripción y un botón. Es útil para llamadas a la acción destacadas.",
  descriptionClass = "",
  buttonText = "Botón de ejemplo",
  buttonHref = "#",
  buttonType = "button",
  image,
  imageAlt = "Imagen por defecto de Hero2",
  animationLevel,
} = Astro.props as HeroProps;

const resolvedAnimationLevel: AnimationLevel = animationLevel ?? "none";

const imageAnim =
  resolvedAnimationLevel === "fancy"
    ? "motion-safe:animate-fade-down motion-safe:animate-duration-[2000ms]"
    : resolvedAnimationLevel === "basic"
    ? "transition-transform duration-300 hover:scale-105"
    : "";

const textAnim =
  resolvedAnimationLevel === "fancy"
    ? "motion-safe:animate-fade-up motion-safe:animate-duration-[2000ms]"
    : resolvedAnimationLevel === "basic"
    ? "transition-all duration-300 ease-in-out hover:scale-105"
    : "";
---

<Section id={sectionId} class={`text-center ${sectionClass}`}>
  <Container id={containerId} class={containerClass}>
    <AstroImage
      src={image ?? fallbackHero2}
      alt={imageAlt}
      width={600}
      height={400}
      class={`mx-auto mb-6 rounded-xl shadow-lg ${imageAnim}`}
      loading="eager"
      decoding="async"
    />

    <div class={`max-w-xl mx-auto ${textAnim}`}>
      {
        title && (
          <Typography
            tag="h2"
            class={`text-3xl font-bold mb-4 drop-shadow-md ${titleClass}`}
          >
            {title}
          </Typography>
        )
      }

      {
        description && (
          <Typography
            tag="p"
            class={`text-gray-600 mb-6 opacity-90 ${descriptionClass}`}
          >
            {description}
          </Typography>
        )
      }

      {
        buttonText && (
          <div class="flex justify-center">
            <Button
              href={buttonHref}
              type={buttonType}
              class="transition duration-300 ease-in-out hover:scale-105"
            >
              {buttonText}
            </Button>
          </div>
        )
      }
    </div>
  </Container>
</Section>
