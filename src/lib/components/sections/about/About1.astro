---
import Typography from "../../ui/Typography.astro";
import Container from "../../elements/Container.astro";
import Section from "../../elements/Section.astro";
import { Image } from "astro:assets";
import fallbackAbout from "../../../assets/about/600x500.webp";
import type { AboutProps } from "../../../types/sections/AboutProps";
import type { AnimationLevel } from "../../../types/Shared";

const {
    // Identificadores HTML
    sectionId, // ID para la sección principal del componente
    containerId, // ID para el contenedor interno

    // Clases personalizadas
    sectionClass = "", // Clases adicionales para el <Section>
    containerClass = "", // Clases adicionales para el <Container>
    tagClass = "", // Clases para el tagTitle
    titleClass = "", // Clases para el título
    imageClass = "", // Clases para la imagen

    // Contenido textual
    tagTitle = "Etiqueta superior", // Ej: "Acerca de nosotros"
    title = "Título principal de la sección", // Ej: "Conocé nuestro equipo"
    paragraphs = [
        {
            tag: "p",
            content: "Texto de ejemplo para el componente About.",
            class: "text-gray-600 mb-4",
        },
        {
            tag: "small",
            content: "Texto auxiliar en tamaño pequeño.",
            class: "text-gray-500",
        },
    ],

    // Imagen
    image, // Imagen importada desde assets
    imageAlt = "Texto alternativo de la imagen", // Alt por accesibilidad

    // Comportamiento visual
    animationLevel, // 'none' | 'basic' | 'fancy'

    // Botón opcional (solo si se usa)
    buttonText, // Texto del botón (opcional)
    buttonHref, // Enlace al que redirige el botón (opcional)
} = Astro.props as AboutProps;

const resolvedAnimationLevel: AnimationLevel = animationLevel ?? "none";

const allowedTags = ["h1", "h2", "h3", "h4", "h5", "h6", "p", "small"];

const imageAnim =
    resolvedAnimationLevel === "fancy"
        ? "motion-safe:animate-fade-up motion-safe:animate-duration-[2000ms] transition-transform duration-300 hover:scale-105"
        : resolvedAnimationLevel === "basic"
          ? "transition-transform duration-300 hover:scale-105"
          : "";

const textAnim =
    resolvedAnimationLevel === "fancy"
        ? "motion-safe:animate-fade-down motion-safe:animate-duration-[2000ms] transition-all duration-300 ease-in-out hover:scale-105"
        : resolvedAnimationLevel === "basic"
          ? "transition-all duration-300 ease-in-out hover:scale-105"
          : "";
---

<Section id={sectionId} class={sectionClass}>
    <Container id={containerId} class={containerClass}>
        <div
            class="flex flex-col-reverse md:flex-row items-center justify-between gap-12"
        >
            <!-- Imagen -->
            <div class={`md:w-1/2 ${imageAnim}`}>
                <Image
                    src={image ?? fallbackAbout}
                    alt={imageAlt ?? "Imagen por defecto de sección"}
                    width={600}
                    height={500}
                    class={`w-full rounded-xl shadow-lg ${imageClass}`}
                    loading="eager"
                    decoding="async"
                    inferSize
                />
            </div>

            <!-- Contenido -->
            <div class={`md:w-1/2 text-center md:text-left ${textAnim}`}>
                {
                    tagTitle && (
                        <Typography
                            tag="small"
                            class={`uppercase text-blue-600 tracking-widest font-bold mb-2 ${tagClass}`}
                        >
                            {tagTitle}
                        </Typography>
                    )
                }

                {
                    title && (
                        <Typography tag="h2" class={`mb-6 ${titleClass}`}>
                            {title}
                        </Typography>
                    )
                }

                {
                    paragraphs.map(
                        ({ tag = "p", content, class: paragraphClass }) => {
                            const safeTag = allowedTags.includes(tag)
                                ? tag
                                : "p";
                            return (
                                <Typography
                                    tag={safeTag as any}
                                    class={`text-gray-600 mb-4 ${paragraphClass ?? ""}`}
                                    set:html={content}
                                />
                            );
                        },
                    )
                }
            </div>
        </div>
    </Container>
</Section>
