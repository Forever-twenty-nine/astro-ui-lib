---
import Typography from "../../ui/Typography.astro";
import Container from "../../elements/Container.astro";
import Section from "../../elements/Section.astro";
import Button from "../../ui/Button.astro";

interface Paragraph {
    tag?: string;
    class?: string;
    content: string;
}

interface Props {
    sectionId?: string;
    sectionClass?: string;
    containerId?: string;
    containerClass?: string;
    tagTitle?: string;
    tagClass?: string;
    title?: string;
    titleClass?: string;
    imageSrc?: string;
    imageAlt?: string;
    imageClass?: string;
    paragraphs?: Paragraph[];
    buttonText?: string;
    buttonHref?: string;
}

const {
    sectionId,
    sectionClass = "bg-info-50",
    containerId,
    containerClass = "md:max-w-5xl",
    tagTitle,
    tagClass,
    title,
    titleClass,
    imageSrc,
    imageAlt,
    imageClass,
    paragraphs = [],
    buttonText,
    buttonHref,
} = Astro.props;

const allowedTags = ["h1", "h2", "h3", "h4", "h5", "h6", "p", "small"];
---

<Section id={sectionId} class={`py-20 ${sectionClass}`}>
    <Container
        id={containerId}
        class={`flex flex-col md:flex-row-reverse items-center gap-12 ${containerClass}`}
    >
        <!-- Imagen -->
        {
            imageSrc && (
                <div class="md:w-1/2">
                    <img
                        src={imageSrc}
                        alt={imageAlt}
                        class={`rounded-xl shadow-lg w-full ${imageClass ?? ""}`}
                        loading="lazy"
                    />
                </div>
            )
        }

        <!-- Contenido -->
        <div class="md:w-1/2 text-center md:text-left">
            {
                tagTitle && (
                    <Typography
                        tag="small"
                        class={`uppercase tracking-wide text-primary-600 font-semibold mb-2 ${tagClass}`}
                    >
                        {tagTitle}
                    </Typography>
                )
            }

            {
                title && (
                    <Typography
                        tag="h2"
                        class={`text-3xl font-bold text-gray-900 mb-6 ${titleClass}`}
                    >
                        {title}
                    </Typography>
                )
            }

            {
                paragraphs.map(
                    ({ tag = "p", content, class: paragraphClass }) => {
                        const safeTag = allowedTags.includes(tag) ? tag : "p";
                        return (
                            <Typography
                                tag={safeTag as any}
                                class={`text-gray-700 mb-4 ${paragraphClass ?? ""}`}
                                set:html={content}
                            />
                        );
                    },
                )
            }

            {
                buttonText && buttonHref && (
                    <div class="mt-6">
                        <Button href={buttonHref} type="primary">
                            {buttonText}
                        </Button>
                    </div>
                )
            }
        </div>
    </Container>
</Section>
