---
import Overlay from "../elements/Overlay.astro";
import Container from "../elements/Container.astro";
import BrandLink from "../ui/BrandLink.astro";
import Nav from "../elements/Nav.astro";

interface Link {
  href: string;
  text: string;
}

interface Brand {

  href?: string;
  id?: string;
  class?: string;
  src: any;
  alt: string;
  classImage?: string;
}

interface Props {
  id?: string;
  class?: string;
  links: Link[];
  brand: Brand;
  navVariant?: "default" | "muted";
  containerVariant?: "default" | "compact";
}

const {
  id = "",
  class: className = "",
  links = [],
  brand,
  navVariant = "default",
  containerVariant = "default",
}: Props = Astro.props;
---

<header
  id={id || undefined}
  class={`fixed top-0 left-0 w-full shadow-md py-2 bg-white z-30 ${className}`}
>
  <Container variant={containerVariant}>
    <div class="flex justify-between items-center">
      <BrandLink
        hrefLink={brand.href || "#"}
        idLink={brand.id || undefined}
        classLink={brand.class || ""}
        brandSrc={brand.src}
        
        brandAlt={brand.alt}
        classImage={brand.classImage}
      />

      <button
        id="menu-toggle"
        class="w-14 h-14 p-4 cursor-pointer z-30 md:hidden flex items-center justify-center"
        aria-expanded="false"
      >
        <svg
          class="w-6 h-6"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 448 512"
        >
          <path
            d="M0 96C0 78.3 14.3 64 32 64H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 128 0 113.7 0 96zM0 256c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z"
          ></path>
        </svg>
      </button>

      <Nav id="nav-menu" links={links} variant={navVariant} />
    </div>
  </Container>

  <Overlay />
</header>

<script is:inline>
  const onLoad = () => {
    const menuToggle = document.getElementById("menu-toggle");
    const navMenu = document.getElementById("nav-menu");
    const menuOverlay = document.getElementById("menu-overlay");

    const openMenu = () => {
      navMenu?.classList.remove("translate-x-full");
      navMenu?.classList.add("translate-x-0");
      menuToggle?.setAttribute("aria-expanded", "true");
      if (menuOverlay) {
        menuOverlay.classList.remove("opacity-0", "pointer-events-none");
        menuOverlay.classList.add("opacity-60");
      }
    };

    const closeMenu = () => {
      navMenu?.classList.remove("translate-x-0");
      navMenu?.classList.add("translate-x-full");
      menuToggle?.setAttribute("aria-expanded", "false");
      if (menuOverlay) {
        menuOverlay.classList.add("opacity-0", "pointer-events-none");
        menuOverlay.classList.remove("opacity-60");
      }
    };

    const toggleMenu = () => {
      const isOpen = navMenu.classList.contains("translate-x-0");
      isOpen ? closeMenu() : openMenu();
    };

    const handleResizeNavClose = () => {
      if (window.matchMedia("(max-width: 768px)").matches) {
        closeMenu();
      }
    };

    menuToggle?.addEventListener("click", toggleMenu);
    navMenu?.querySelectorAll("a").forEach((link) => {
      link.addEventListener("click", handleResizeNavClose);
    });
    menuOverlay?.addEventListener("click", closeMenu);

    // Cleanup on pagehide (important for bfcache)
    window.addEventListener("pagehide", () => {
      menuToggle?.removeEventListener("click", toggleMenu);
      navMenu?.querySelectorAll("a").forEach((link) => {
        link.removeEventListener("click", handleResizeNavClose);
      });
      menuOverlay?.removeEventListener("click", closeMenu);
    });
  };

  if (document.readyState === "complete") {
    onLoad();
  } else {
    window.addEventListener("DOMContentLoaded", onLoad, { once: true });
  }
</script>
